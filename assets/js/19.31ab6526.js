(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{426:function(s,t,o){"use strict";o.r(t);var a=o(4),_=Object(a.a)({},(function(){var s=this,t=s.$createElement,o=s._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[o("h1",{attrs:{id:"mongodb-开发纪要"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mongodb-开发纪要"}},[s._v("#")]),s._v(" mongoDb 开发纪要")]),s._v(" "),o("h2",{attrs:{id:"集群"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[s._v("#")]),s._v(" 集群")]),s._v(" "),o("h3",{attrs:{id:"分片寻址离散问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#分片寻址离散问题"}},[s._v("#")]),s._v(" 分片寻址离散问题")]),s._v(" "),o("p",[o("code",[s._v("1")]),s._v(" 利用MongoDB分片均衡分布机制,使用_id作为均片键,可以增加不同范围集合查询和计算效率;")]),s._v(" "),o("p",[o("code",[s._v("2")]),s._v(" 同样利用均衡分布机制,采用时序升序权重较大的索引字段作为片键,可以使频繁查询相同集合进行倾斜存放,让单机性能查找性能提升,优化分片后寻址效率;")]),s._v(" "),o("h3",{attrs:{id:"mongodb事务提交"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mongodb事务提交"}},[s._v("#")]),s._v(" MongoDB事务提交")]),s._v(" "),o("p",[s._v("Nodejs中使用批量异步提交MongoDB操作，首先得开启session,操作中传递session进去,最后commit session，如果按500个数据记录就需要分片事务提交，那么就得预先储存多个session，并且通过异步并发运行触发方法进行提交。")]),s._v(" "),o("p",[o("code",[s._v("解决方案")])]),s._v(" "),o("p",[s._v("通过批量声明session并暂存到数组,然后使用并发async.parallel进行提交;")]),s._v(" "),o("h2",{attrs:{id:"分片"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#分片"}},[s._v("#")]),s._v(" 分片")]),s._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),o("p",[s._v("MongoDb分片前需要采用sh.addShare添加分片库")])]),s._v(" "),o("p",[o("code",[s._v("集合分片")])]),s._v(" "),o("p",[s._v("集合分片需要设定分片依赖的关键key(片键),Mongodb内部的均衡器(Balancer)将会定期对指定数据集合进行数据调度以达到分片间数据量均匀分布")]),s._v(" "),o("p",[o("code",[s._v("均匀分布")])]),s._v(" "),o("p",[s._v("采用默认片键的情况下(_id),均匀分布的算法是根据_id的哈希值进行分簇(chunk),将不同的簇平铺到分片上;")]),s._v(" "),o("div",{staticClass:"custom-block tip"},[o("p",{staticClass:"custom-block-title"},[s._v("warning")]),s._v(" "),o("p",[s._v("均衡后,实际上数据是以一定量的小集合形式分散在各个分片上,当寻找数据的时候,命中多个分片,即等效并发查库;")]),s._v(" "),o("p",[s._v("若查询区域没有超出簇的寻址范围,实际上有效的查询只在命中范围的分片上,其他分片则会发生空转情况(即使没有数据,也要进行查库,并且获得结果);")])]),s._v(" "),o("h2",{attrs:{id:"查询"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#查询"}},[s._v("#")]),s._v(" 查询")]),s._v(" "),o("h3",{attrs:{id:"mongodb-join表"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mongodb-join表"}},[s._v("#")]),s._v(" MongoDB Join表")]),s._v(" "),o("p",[s._v("MongoDB Join 表是通过aggregate中$lookup方法进行join操作，join后的记录集合会写入到as配置的字段中，此时数据集中存在嵌套文档的字段,实体相当于leftJoin的一棵树；")]),s._v(" "),o("p",[o("code",[s._v("1")]),s._v("  lookup之后，采用unwind获得相当于union right的集合,然后采用addFields把需要的字段添加到结果中；")]),s._v(" "),o("p",[o("code",[s._v("2")]),s._v("  lookup之后,直接采用addFields把需要的字段添加到结果集中,相当于union操作；")])])}),[],!1,null,null,null);t.default=_.exports}}]);